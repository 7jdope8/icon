import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import __builtin__
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
if 73 - 73: II111iiii
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * Ii1I
if 46 - 46: ooOoO0o * I11i - OoooooooOO
if 30 - 30: o0oOOo0O0Ooo - O0 % o0oOOo0O0Ooo - OoooooooOO * O0 * OoooooooOO
if 60 - 60: iIii1I11I1II1 / i1IIi * oO0o - I1ii11iIi11i + o0oOOo0O0Ooo
if 94 - 94: i1IIi % Oo0Ooo
if 68 - 68: Ii1I / O0
if 46 - 46: O0 * II111iiii / IiII * Oo0Ooo * iII111i . I11i
if 62 - 62: i11iIiiIii - II111iiii % I1Ii111 - iIii1I11I1II1 . I1ii11iIi11i . II111iiii
if 61 - 61: oO0o / OoOoOO00 / iII111i * OoO0O00 . II111iiii
if 1 - 1: II111iiii - I1ii11iIi11i % i11iIiiIii + IiII . I1Ii111
if 55 - 55: iIii1I11I1II1 - I1IiiI . Ii1I * IiII * i1IIi / iIii1I11I1II1
if 79 - 79: oO0o + I1Ii111 . ooOoO0o * IiII % I11i . I1IiiI
if 94 - 94: iII111i * Ii1I / IiII . i1IIi * iII111i
if 47 - 47: i1IIi % i11iIiiIii
if 20 - 20: ooOoO0o * II111iiii
oO0o0o0ooO0oO = "http://stephen-builds.uk/supremacy%20new/main.xml"
__builtin__ . tvdb_api_key = "BA1389F1DD8E787A"
__builtin__ . tmdb_api_key = "4b01582d1d5902b79fcdbfdb5f4e1fde"
__builtin__ . trakt_client_id = "948c4e2514db4f2cca33e737f5e73ae213e537d344b9916983e53e3cc2a1b21c"
__builtin__ . trakt_client_secret = "140369c2c981732a7b183db2e9300065629b8b7417a149a0c4e098ebee8f692e"
__builtin__ . search_db_location = ""
if 52 - 52: II111iiii - i11iIiiIii % I1Ii111
import os
import sys
if 54 - 54: OOooOOo % O0 + I1IiiI - iII111i / I11i
import koding
import koding . router as router
import resolveurl as urlresolver
import resources . lib . search
import resources . lib . sources
import resources . lib . testings
import resources . lib . util . info
import xbmc
import xbmcaddon
import xbmcplugin
from koding import route
from resources . lib . util . xml import JenList , display_list
import resources . lib . util . views
from resources . lib . plugins import *
from language import get_string as _
from resources . lib . plugin import run_hook
if 31 - 31: OoO0O00 + II111iiii
if 13 - 13: OOooOOo * oO0o * I1IiiI
oOOOO = xbmcaddon . Addon ( ) . getAddonInfo ( 'id' )
i11iiII = xbmcaddon . Addon ( ) . getAddonInfo ( 'name' )
I1iiiiI1iII = xbmc . translatePath ( 'special://home/' )
IiIi11i = os . path . join ( I1iiiiI1iII , 'addons' )
iIii1I111I11I = os . path . join ( IiIi11i , oOOOO )
OO00OooO0OO = "files"
if 28 - 28: II111iiii
if 28 - 28: iIii1I11I1II1 - i1IIi
@ route ( "main" )
def OO ( ) :
 if not oO0O ( oO0o0o0ooO0oO ) :
  if 70 - 70: Oo0Ooo % Oo0Ooo . IiII % OoO0O00 * o0oOOo0O0Ooo % oO0o
  koding . Add_Dir (
 name = _ ( "Message" ) ,
 url = _ ( "Sorry, server is down" ) ,
 mode = "message" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Search" ) ,
 url = "" ,
 mode = "Search" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Testings" ) ,
 url = '{"file_name":"testings.xml"}' ,
 mode = "Testings" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  if 23 - 23: i11iIiiIii + I1IiiI
  if 68 - 68: OoOoOO00 . oO0o . i11iIiiIii
@ route ( mode = 'get_list_uncached' , args = [ "url" ] )
def II ( url ) :
 global OO00OooO0OO
 if 14 - 14: Oo0Ooo . I1IiiI / Ii1I
 IiiiI1II1I1 = JenList ( url , cached = False )
 if not IiiiI1II1I1 :
  koding . dolog ( _ ( "returned empty for " ) + url )
 oo = IiiiI1II1I1 . get_list ( )
 Ii11iI1i = IiiiI1II1I1 . get_content_type ( )
 if oo == [ ] :
  return False
 if Ii11iI1i :
  OO00OooO0OO = Ii11iI1i
 display_list ( oo , OO00OooO0OO )
 return True
 if 82 - 82: i11iIiiIii . OOooOOo / Oo0Ooo * O0 % oO0o % iIii1I11I1II1
 if 78 - 78: iIii1I11I1II1 - Ii1I * OoO0O00 + o0oOOo0O0Ooo + iII111i + iII111i
@ route ( mode = "get_list" , args = [ "url" ] )
def oO0O ( url ) :
 global OO00OooO0OO
 if 11 - 11: iII111i - OoO0O00 % ooOoO0o % iII111i / OoOoOO00 - OoO0O00
 IiiiI1II1I1 = JenList ( url )
 if not IiiiI1II1I1 :
  koding . dolog ( _ ( "returned empty for " ) + url )
 oo = IiiiI1II1I1 . get_list ( )
 Ii11iI1i = IiiiI1II1I1 . get_content_type ( )
 if oo == [ ] :
  return False
 if Ii11iI1i :
  OO00OooO0OO = Ii11iI1i
 display_list ( oo , OO00OooO0OO )
 return True
 if 74 - 74: iII111i * O0
 if 89 - 89: oO0o + Oo0Ooo
@ route ( mode = "all_episodes" , args = [ "url" ] )
def Ii1IOo0o0 ( url ) :
 global OO00OooO0OO
 import pickle
 import xbmcgui
 III1ii1iII = pickle . loads ( url )
 oo0oooooO0 = [ ]
 i11Iiii = xbmcgui . DialogProgress ( )
 i11Iiii . create ( i11iiII , _ ( "Loading items" ) )
 iI = len ( III1ii1iII )
 for I1i1I1II , i1 in enumerate ( III1ii1iII ) :
  if i11Iiii . iscanceled ( ) :
   break
  IiIiiI = ( ( I1i1I1II + 1 ) * 100 ) / iI
  i11Iiii . update ( IiIiiI , _ ( "processing lists" ) , _ ( "%s of %s" ) % (
 I1i1I1II + 1 ,
 iI ) )
  if 31 - 31: Ii1I . Ii1I - o0oOOo0O0Ooo / OoO0O00 + ooOoO0o * I1IiiI
  IiiiI1II1I1 = JenList ( i1 )
  oo0oooooO0 . extend ( IiiiI1II1I1 . get_list ( skip_dialog = True ) )
 OO00OooO0OO = "episodes"
 display_list ( oo0oooooO0 , "episodes" )
 if 63 - 63: I1Ii111 % i1IIi / OoooooooOO - OoooooooOO
 if 8 - 8: OoOoOO00
@ route ( mode = "Settings" )
def o00O ( ) :
 xbmcaddon . Addon ( ) . openSettings ( )
 if 69 - 69: oO0o % I1Ii111 - o0oOOo0O0Ooo + I1Ii111 - O0 % OoooooooOO
 if 31 - 31: II111iiii - OOooOOo . I1Ii111 % OoOoOO00 - O0
@ route ( mode = "ScraperSettings" )
def iii11 ( ) :
 xbmcaddon . Addon ( 'script.module.nanscrapers' ) . openSettings ( )
 if 58 - 58: OOooOOo * i11iIiiIii / OoOoOO00 % I1Ii111 - I1ii11iIi11i / oO0o
 if 50 - 50: I1IiiI
@ route ( mode = "ResolverSettings" )
def Ii1i11IIii1I ( ) :
 xbmcaddon . Addon ( 'script.module.resolveurl' ) . openSettings ( )
 if 52 - 52: o0oOOo0O0Ooo - OoooooooOO + Ii1I + Ii1I - o0oOOo0O0Ooo / I1Ii111
 if 44 - 44: ooOoO0o . i1IIi - I1ii11iIi11i . O0 - ooOoO0o
@ route ( mode = "ClearTraktAccount" )
def o0O ( ) :
 import xbmcgui
 if xbmcgui . Dialog ( ) . yesno ( i11iiII , "{0} Trakt {1}. {2}" . format ( _ ( "Delete" ) , _ ( "Settings" ) . lower ( ) , _ ( "Are you sure?" ) ) ) :
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_EXPIRES_AT" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_ACCESS_TOKEN" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_REFRESH_TOKEN" , "" )
  if 72 - 72: iII111i / i1IIi * Oo0Ooo - I1Ii111
  if 51 - 51: II111iiii * OoO0O00 % o0oOOo0O0Ooo * II111iiii % I1ii11iIi11i / ooOoO0o
@ route ( mode = "message" , args = [ "url" ] )
def iIIIIii1 ( message ) :
 import xbmcgui
 if len ( message ) > 80 :
  koding . Text_Box ( i11iiII , message )
 else :
  xbmcgui . Dialog ( ) . ok ( i11iiII , message )
  if 58 - 58: i11iIiiIii % I11i
  if 71 - 71: OOooOOo + ooOoO0o % i11iIiiIii + I1ii11iIi11i - IiII
@ route ( 'clearCache' )
def oO0OOoO0 ( ) :
 import xbmcgui
 i11Iiii = xbmcgui . Dialog ( )
 if i11Iiii . yesno ( i11iiII , _ ( "Clear Metadata?" ) ) :
  koding . Remove_Table ( "meta" )
  koding . Remove_Table ( "episode_meta" )
 if i11Iiii . yesno ( i11iiII , _ ( "Clear Scraper Cache?" ) ) :
  import nanscrapers
  nanscrapers . clear_cache ( )
 if i11Iiii . yesno ( i11iiII , _ ( "Clear GIF Cache?" ) ) :
  I111Ii111 = os . path . join (
 xbmc . translatePath ( xbmcaddon . Addon ( ) . getSetting ( "cache_folder" ) ) ,
 "artcache" )
  koding . Delete_Folders ( I111Ii111 )
 xbmc . log ( "running hook:" , xbmc . LOGNOTICE )
 run_hook ( "clear_cache" )
 if 4 - 4: oO0o
 if 93 - 93: OoO0O00 % oO0o . OoO0O00 * I1Ii111 % Ii1I . II111iiii
def iI1ii1Ii ( mode , url = "" ) :
 import urllib
 oooo000 = sys . argv [ 0 ] + "?mode=%s" % mode
 if 16 - 16: I1ii11iIi11i + OoO0O00 - II111iiii
 if url :
  oooo000 += "&url=%s" % urllib . quote_plus ( url )
 return oooo000
 if 85 - 85: OoOoOO00 + i1IIi
 if 58 - 58: II111iiii * OOooOOo * I1ii11iIi11i / OOooOOo
def oO0o0OOOO ( ) :
 oooo000 = run_hook ( "first_run_wizard" )
 if oooo000 :
  return
  if 68 - 68: iII111i - I1Ii111 - I1IiiI - I1ii11iIi11i + I11i
  if 10 - 10: OoooooooOO % iIii1I11I1II1
  if 54 - 54: I1Ii111 - II111iiii % OoOoOO00 % I11i % iIii1I11I1II1 + ooOoO0o
if xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 oO0o0OOOO ( )
 if 15 - 15: I11i * ooOoO0o * Oo0Ooo % i11iIiiIii % OoOoOO00 - OOooOOo
O0ooo0O0oo0 = xbmc . getInfoLabel ( "Container.FolderName" )
if O0ooo0O0oo0 in [ "" , "plugin.program.super.favourites" ] :
 __builtin__ . JEN_WIDGET = True
else :
 __builtin__ . JEN_WIDGET = False
 if 91 - 91: iIii1I11I1II1 + I1Ii111
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_NONE )
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
if 31 - 31: IiII . OoOoOO00 . OOooOOo
router . Run ( )
if 75 - 75: I11i + OoO0O00 . OoOoOO00 . ooOoO0o + Oo0Ooo . OoO0O00
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = False )
try :
 OO00OooO0OO = __builtin__ . content_type
except :
 pass
if not xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 if OO00OooO0OO == "files" :
  OO00OooO0OO = "other"
 resources . lib . util . views . set_list_view_mode ( OO00OooO0OO )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')