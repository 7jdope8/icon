import base64;exec base64.b64decode('IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaW1wb3J0IF9fYnVpbHRpbl9fCmlmIDY0IC0gNjQ6IGkxMWlJaWlJaWkKaWYgNjUgLSA2NTogTzAgLyBpSWlpMUkxMUkxSUkxICUgT29vb29vb29PTyAtIGkxSUlpCmlmIDczIC0gNzM6IElJMTExaWlpaQppZiAyMiAtIDIyOiBJMUlpaUkgKiBPbzBPb28gLyBPb08wTzAwIC4gT29Pb09PMDAgLiBvMG9PT28wTzBPb28gLyBJMWlpMTFpSWkxMWkKaWYgNDggLSA0ODogb08wbyAvIE9Pb29PT28gLyBJMTFpIC8gSWkxSQppZiA0OCAtIDQ4OiBpSUkxMTFpICUgSWlJSSArIEkxSWkxMTEgLyBvb09vTzBvICogSWkxSQppZiA0NiAtIDQ2OiBvb09vTzBvICogSTExaSAtIE9vb29vb29vT08KaWYgMzAgLSAzMDogbzBvT09vME8wT29vIC0gTzAgJSBvMG9PT28wTzBPb28gLSBPb29vb29vb09PICogTzAgKiBPb29vb29vb09PCmlmIDYwIC0gNjA6IGlJaWkxSTExSTFJSTEgLyBpMUlJaSAqIG9PMG8gLSBJMWlpMTFpSWkxMWkgKyBvMG9PT28wTzBPb28KaWYgOTQgLSA5NDogaTFJSWkgJSBPbzBPb28KaWYgNjggLSA2ODogSWkxSSAvIE8wCmlmIDQ2IC0gNDY6IE8wICogSUkxMTFpaWlpIC8gSWlJSSAqIE9vME9vbyAqIGlJSTExMWkgLiBJMTFpCmlmIDYyIC0gNjI6IGkxMWlJaWlJaWkgLSBJSTExMWlpaWkgJSBJMUlpMTExIC0gaUlpaTFJMTFJMUlJMSAuIEkxaWkxMWlJaTExaSAuIElJMTExaWlpaQppZiA2MSAtIDYxOiBvTzBvIC8gT29Pb09PMDAgLyBpSUkxMTFpICogT29PME8wMCAuIElJMTExaWlpaQppZiAxIC0gMTogSUkxMTFpaWlpIC0gSTFpaTExaUlpMTFpICUgaTExaUlpaUlpaSArIElpSUkgLiBJMUlpMTExCmlmIDU1IC0gNTU6IGlJaWkxSTExSTFJSTEgLSBJMUlpaUkgLiBJaTFJICogSWlJSSAqIGkxSUlpIC8gaUlpaTFJMTFJMUlJMQppZiA3OSAtIDc5OiBvTzBvICsgSTFJaTExMSAuIG9vT29PMG8gKiBJaUlJICUgSTExaSAuIEkxSWlpSQppbXBvcnQgeGJtY2FkZG9uCmlmIDk0IC0gOTQ6IGlJSTExMWkgKiBJaTFJIC8gSWlJSSAuIGkxSUlpICogaUlJMTExaQppZiA0NyAtIDQ3OiBpMUlJaSAlIGkxMWlJaWlJaWkKaWYgMjAgLSAyMDogb29Pb08wbyAqIElJMTExaWlpaQpvTzBvMG8wb29PMG9PID0geGJtY2FkZG9uIC4gQWRkb24gKCApIC4gZ2V0QWRkb25JbmZvICggJ2lkJyApCm9vMG8wTzAwID0geGJtY2FkZG9uIC4gQWRkb24gKCBpZCA9IG9PMG8wbzBvb08wb08gKQpvTyA9IG9vMG8wTzAwIC4gZ2V0U2V0dGluZyAoICdkbGltYWdlJyApCmkxaWlJSWlpSTExMSA9IG9vMG8wTzAwIC4gZ2V0U2V0dGluZyAoICduZXdzX3dpbicgKQpvb29PT09PTyA9ICdodHRwczovL3Bhc3RlYmluLmNvbS9yYXcva21mNGdoQjEnCmlmIG5vdCAnZmlsZTonIGluIG9vb09PT09PIGFuZCBub3QgJ2h0dHAnIGluIG9vb09PT09PIDoKIG9vb09PT09PID0gb29vT09PT08gLiBkZWNvZGUgKCAnYmFzZTY0JyApCl9fYnVpbHRpbl9fIC4gdHZkYl9hcGlfa2V5ID0gJ0U3NDc0RDBGNjI5RTQ4RkMnCl9fYnVpbHRpbl9fIC4gdG1kYl9hcGlfa2V5ID0gJzEwMDg1ODBmNDg5Yjc2YWJkZTRkMjczNWZhNTU2YTM2JwpfX2J1aWx0aW5fXyAuIHRyYWt0X2NsaWVudF9pZCA9ICdiZmFiZDViZDFiMDFiYjBlMjIzY2M5MWZiYTExZTJiNDYzNmRlY2ZmZTc5MmJmZTAxYThlOGNhMjE1OGZlM2YzJwpfX2J1aWx0aW5fXyAuIHRyYWt0X2NsaWVudF9zZWNyZXQgPSAnM2Y4ODExZGIyYTdkYzBmYzdiYWY5MmY3ZDc1NWVmYTZjOTNjYmJjMWI1ZTM3OWRlZTBiZGM3NmVmZmY5OTMzZScKX19idWlsdGluX18gLiBzZWFyY2hfZGJfbG9jYXRpb24gPSAnaHR0cDovL2dlbi10ZWMuY28vZ2VudGVjd2l6L1BMRUFTRSUyMFNVQlNDUklCRSUyMFRPJTIwQ0hBUkxJRSUyMFRFQyUyMFlPVVRVQkUvc3Rhci90dnNob3dzL3NlYXJjaC5kYicKaWYgMjIgLSAyMjogSWkxSSAqIE8wIC8gbzBvT09vME8wT29vCmltcG9ydCBvcwppbXBvcnQgc3lzCmlmIDY0IC0gNjQ6IElpMUkgJSBpMUlJaSAlIE9vb29vb29vT08KaW1wb3J0IGtvZGluZwppbXBvcnQga29kaW5nIC4gcm91dGVyIGFzIHJvdXRlcgpmcm9tIHJlc291cmNlcyAuIGxpYiAuIGluc3RhbGxhIGltcG9ydCBEaWFsb2dfc3BlY2lmaWMKZnJvbSByZXNvdXJjZXMgLiBsaWIgLiBuZXdzX3dpbmRvdyBpbXBvcnQgRGlhbG9nX0V4YW1wbGUKaW1wb3J0IHJlc291cmNlcyAuIGxpYiAuIHNlYXJjaAppbXBvcnQgcmVzb3VyY2VzIC4gbGliIC4gc291cmNlcwppbXBvcnQgcmVzb3VyY2VzIC4gbGliIC4gdGVzdGluZ3MKaW1wb3J0IHJlc291cmNlcyAuIGxpYiAuIHV0aWwgLiBpbmZvCmltcG9ydCB4Ym1jCmltcG9ydCB4Ym1jcGx1Z2luCmZyb20ga29kaW5nIGltcG9ydCByb3V0ZQpmcm9tIHJlc291cmNlcyAuIGxpYiAuIHV0aWwgLiB4bWwgaW1wb3J0IEplbkxpc3QgLCBkaXNwbGF5X2xpc3QKaW1wb3J0IHJlc291cmNlcyAuIGxpYiAuIHV0aWwgLiB2aWV3cwpmcm9tIHJlc291cmNlcyAuIGxpYiAuIHBsdWdpbnMgaW1wb3J0ICoKZnJvbSBsYW5ndWFnZSBpbXBvcnQgZ2V0X3N0cmluZyBhcyBfCmZyb20gcmVzb3VyY2VzIC4gbGliIC4gcGx1Z2luIGltcG9ydCBydW5faG9vawppZiAzIC0gMzogaUlJMTExaSArIE8wCmlmIDQyIC0gNDI6IE9Pb29PT28gLyBpMUlJaSArIGkxMWlJaWlJaWkgLSBJaTFJCm9vME9vbzAgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRBZGRvbkluZm8gKCAnbmFtZScgKQpJMUkxMUkxSTFJID0geGJtYyAuIHRyYW5zbGF0ZVBhdGggKCAnc3BlY2lhbDovL2hvbWUvJyApCk9vb08wT08gPSBvcyAuIHBhdGggLiBqb2luICggSTFJMTFJMUkxSSAsICdhZGRvbnMnICkKaWlpSWkgPSBvcyAuIHBhdGggLiBqb2luICggT29vTzBPTyAsIG9PMG8wbzBvb08wb08gKQpJaUlJSWlJMUkxID0gImZpbGVzIgppZiA4NiAtIDg2OiBpMTFpSWlpSWlpICsgSWkxSSArIG9vT29PMG8gKiBJMTFpICsgbzBvT09vME8wT29vCkAgcm91dGUgKCAibWFpbiIgKQpkZWYgb09vTyAoICkgOgogaWYgaTFpaUlJaWlJMTExID09ICd0cnVlJyA6CiAgaWYgNjggLSA2ODogT29Pb09PMDAgLiBvTzBvIC4gaTExaUlpaUlpaQogIGtvZGluZyAuIEFkZF9EaXIgKCBuYW1lID0gJ0xhdGVzdCBOZXdzIEFuZCBVcGRhdGVzIFRvIEdsb2JhbCBUZWMnICwgdXJsID0gJ3sibXlfdGV4dCI6IkxhdGVzdCBOZXdzW0NSXSEhISIsIm15X2Rlc2MiOiIifScgLCBtb2RlID0gJ2RpYWxvZ19leGFtcGxlJyAsIGZvbGRlciA9IEZhbHNlICwgaWNvbiA9IG9zIC4gcGF0aCAuIGpvaW4gKCBpaWlJaSAsICdpY29uLnBuZycgKSAsIGZhbmFydCA9IG9zIC4gcGF0aCAuIGpvaW4gKCBpaWlJaSAsICdmYW5hcnQuanBnJyApICkKIGlmIG5vdCBJSSAoIG9vb09PT09PICkgOgogIGtvZGluZyAuIEFkZF9EaXIgKAogbmFtZSA9IF8gKCAiTWVzc2FnZSIgKSAsCiB1cmwgPSBfICggIlNvcnJ5LCBzZXJ2ZXIgaXMgZG93biIgKSAsCiBtb2RlID0gIm1lc3NhZ2UiICwKIGZvbGRlciA9IFRydWUgLAogaWNvbiA9IHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldEFkZG9uSW5mbyAoICJpY29uIiApICwKIGZhbmFydCA9IHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldEFkZG9uSW5mbyAoICJmYW5hcnQiICkgLAogY29udGVudF90eXBlID0gIiIgKQogIGtvZGluZyAuIEFkZF9EaXIgKAogbmFtZSA9IF8gKCAiU2VhcmNoIiApICwKIHVybCA9ICIiICwKIG1vZGUgPSAiU2VhcmNoIiAsCiBmb2xkZXIgPSBUcnVlICwKIGljb24gPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRBZGRvbkluZm8gKCAiaWNvbiIgKSAsCiBmYW5hcnQgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRBZGRvbkluZm8gKCAiZmFuYXJ0IiApICwKIGNvbnRlbnRfdHlwZSA9ICIiICkKICBrb2RpbmcgLiBBZGRfRGlyICgKIG5hbWUgPSBfICggIlRlc3RpbmdzIiApICwKIHVybCA9ICd7ImZpbGVfbmFtZSI6InRlc3RpbmdzLnhtbCJ9JyAsCiBtb2RlID0gIlRlc3RpbmdzIiAsCiBmb2xkZXIgPSBUcnVlICwKIGljb24gPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRBZGRvbkluZm8gKCAiaWNvbiIgKSAsCiBmYW5hcnQgPSB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRBZGRvbkluZm8gKCAiZmFuYXJ0IiApICwKIGNvbnRlbnRfdHlwZSA9ICIiICkKIGlmIG9PID09ICd0cnVlJyA6CiAga29kaW5nIC4gQWRkX0RpciAoIG5hbWUgPSAnRG93bmxvYWQgQmFja2dyb3VuZHMnICwgdXJsID0gJ3sibXlfdGV4dCI6IklOU1RBTExBW0NSXSEhISIsIm15X2Rlc2MiOiIifScgLCBtb2RlID0gJ2RpYWxvZ19zcGVjaWZpYycgLCBmb2xkZXIgPSBGYWxzZSAsIGljb24gPSBvcyAuIHBhdGggLiBqb2luICggaWlpSWkgLCAnaWNvbi5wbmcnICkgLCBmYW5hcnQgPSBvcyAuIHBhdGggLiBqb2luICggaWlpSWkgLCAnZmFuYXJ0LmpwZycgKSApCiAgaWYgMTQgLSAxNDogT28wT29vIC4gSTFJaWlJIC8gSWkxSQpAIHJvdXRlICggbW9kZSA9ICdnZXRfbGlzdF91bmNhY2hlZCcgLCBhcmdzID0gWyAidXJsIiBdICkKZGVmIElpaWlJMUlJMUkxICggdXJsICkgOgogZ2xvYmFsIElpSUlJaUkxSTEKIGlmIDk1IC0gOTU6IE9vb29vb29vT08gLiBpSWlpMUkxMUkxSUkxCiBPMDBvID0gSmVuTGlzdCAoIHVybCAsIGNhY2hlZCA9IEZhbHNlICkKIGlmIG5vdCBPMDBvIDoKICBrb2RpbmcgLiBkb2xvZyAoIF8gKCAicmV0dXJuZWQgZW1wdHkgZm9yICIgKSArIHVybCApCiBPMDAgPSBPMDBvIC4gZ2V0X2xpc3QgKCApCiBpMTFJMSA9IE8wMG8gLiBnZXRfY29udGVudF90eXBlICggKQogaWYgTzAwID09IFsgXSA6CiAgcmV0dXJuIEZhbHNlCiBpZiBpMTFJMSA6CiAgSWlJSUlpSTFJMSA9IGkxMUkxCiBkaXNwbGF5X2xpc3QgKCBPMDAgLCBJaUlJSWlJMUkxICkKIHJldHVybiBUcnVlCiBpZiA4IC0gODogaUlpaTFJMTFJMUlJMSAtIElpSUkgJSBpSWlpMUkxMUkxSUkxIC0gSWkxSSAqIEkxSWlpSQogaWYgNDMgLSA0MzogSTFJaWlJIC0gaUlJMTExaSAqIGlJaWkxSTExSTFJSTEKQCByb3V0ZSAoIG1vZGUgPSAiZ2V0X2xpc3QiICwgYXJncyA9IFsgInVybCIgXSApCmRlZiBJSSAoIHVybCApIDoKIGdsb2JhbCBJaUlJSWlJMUkxCiBpZiA5NyAtIDk3OiBJMTFpICUgSTExaSArIElJMTExaWlpaSAqIGlJSTExMWkKIE8wMG8gPSBKZW5MaXN0ICggdXJsICkKIGlmIG5vdCBPMDBvIDoKICBrb2RpbmcgLiBkb2xvZyAoIF8gKCAicmV0dXJuZWQgZW1wdHkgZm9yICIgKSArIHVybCApCiBPMDAgPSBPMDBvIC4gZ2V0X2xpc3QgKCApCiBpMTFJMSA9IE8wMG8gLiBnZXRfY29udGVudF90eXBlICggKQogaWYgTzAwID09IFsgXSA6CiAgcmV0dXJuIEZhbHNlCiBpZiBpMTFJMSA6CiAgSWlJSUlpSTFJMSA9IGkxMUkxCiBkaXNwbGF5X2xpc3QgKCBPMDAgLCBJaUlJSWlJMUkxICkKIHJldHVybiBUcnVlCiBpZiA1NCAtIDU0OiBJMTFpICsgSWlJSSAvIGlJSTExMWkKIGlmIDkgLSA5OiBPb09vT08wMCAvIE9vME9vbyAtIElpSUkgLiBpMUlJaSAvIEkxSWlpSSAlIElpSUkKQCByb3V0ZSAoIG1vZGUgPSAiYWxsX2VwaXNvZGVzIiAsIGFyZ3MgPSBbICJ1cmwiIF0gKQpkZWYgbzAgKCB1cmwgKSA6CiBnbG9iYWwgSWlJSUlpSTFJMQogaW1wb3J0IHBpY2tsZQogaW1wb3J0IHhibWNndWkKIEkxMUlJMWkgPSBwaWNrbGUgLiBsb2FkcyAoIHVybCApCiBJSUlJSSA9IFsgXQogb29vb29vTzBvbyA9IHhibWNndWkgLiBEaWFsb2dQcm9ncmVzcyAoICkKIG9vb29vb08wb28gLiBjcmVhdGUgKCBvbzBPb28wICwgXyAoICJMb2FkaW5nIGl0ZW1zIiApICkKIElJaWlpaWlpSWkxSTEgPSBsZW4gKCBJMTFJSTFpICkKIGZvciBJMUlJSWlpICwgb09vT29vT28wbzAgaW4gZW51bWVyYXRlICggSTExSUkxaSApIDoKICBpZiBvb29vb29PMG9vIC4gaXNjYW5jZWxlZCAoICkgOgogICBicmVhawogIE9PT08gPSAoICggSTFJSUlpaSArIDEgKSAqIDEwMCApIC8gSUlpaWlpaWlJaTFJMQogIG9vb29vb08wb28gLiB1cGRhdGUgKCBPT09PICwgXyAoICJwcm9jZXNzaW5nIGxpc3RzIiApICwgXyAoICIlcyBvZiAlcyIgKSAlICgKIEkxSUlJaWkgKyAxICwKIElJaWlpaWlpSWkxSTEgKSApCiAgaWYgODcgLSA4Nzogb08wbyAvIEkxMWkgLSBpMUlJaSAqIE9Pb29PT28gLyBPb29vb29vb09PIC4gTzAKICBPMDBvID0gSmVuTGlzdCAoIG9Pb09vb09vMG8wICkKICBJSUlJSSAuIGV4dGVuZCAoIE8wMG8gLiBnZXRfbGlzdCAoIHNraXBfZGlhbG9nID0gVHJ1ZSApICkKIElpSUlJaUkxSTEgPSAiZXBpc29kZXMiCiBkaXNwbGF5X2xpc3QgKCBJSUlJSSAsICJlcGlzb2RlcyIgKQogaWYgMSAtIDE6IElJMTExaWlpaSAtIEkxMWkgLyBJMTFpCiBpZiA0NiAtIDQ2OiBJaTFJICogT09vb09PbyAtIE9vTzBPMDAgKiBvTzBvIC0gSTFJaTExMQpAIHJvdXRlICggbW9kZSA9ICJTZXR0aW5ncyIgKQpkZWYgb28wICggKSA6CiB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBvcGVuU2V0dGluZ3MgKCApCiBpZiA1NyAtIDU3OiBPT29vT09vIC4gT09vb09PbwogaWYgOTUgLSA5NTogTzAgKyBPb08wTzAwIC4gSUkxMTFpaWlpIC8gTzAKQCByb3V0ZSAoIG1vZGUgPSAiU2NyYXBlclNldHRpbmdzIiApCmRlZiBPMDAwb28wTyAoICkgOgogeGJtY2FkZG9uIC4gQWRkb24gKCAnc2NyaXB0Lm1vZHVsZS51bml2ZXJzYWxzY3JhcGVycycgKSAuIG9wZW5TZXR0aW5ncyAoICkKIGlmIDY2IC0gNjY6IEkxaWkxMWlJaTExaSAvIE9vT29PTzAwIC0gSTFJaWlJIC4gT09vb09PbyAvIEkxSWlpSSAqIE9Pb29PT28KIGlmIDI5IC0gMjk6IEkxaWkxMWlJaTExaSAlIEkxSWlpSSArIG9vT29PMG8gLyBvMG9PT28wTzBPb28gKyBPT29vT09vICogbzBvT09vME8wT29vCkAgcm91dGUgKCBtb2RlID0gIlJlc29sdmVyU2V0dGluZ3MiICkKZGVmIGkxSTFpSSAoICkgOgogdHJ5IDoKICBpbXBvcnQgcmVzb2x2ZXVybAogIHhibWNhZGRvbiAuIEFkZG9uICggJ3NjcmlwdC5tb2R1bGUucmVzb2x2ZXVybCcgKSAuIG9wZW5TZXR0aW5ncyAoICkKIGV4Y2VwdCA6CiAgaW1wb3J0IHVybHJlc29sdmVyCiAgeGJtY2FkZG9uIC4gQWRkb24gKCAnc2NyaXB0Lm1vZHVsZS51cmxyZXNvbHZlcicgKSAuIG9wZW5TZXR0aW5ncyAoICkKICBpZiA5MyAtIDkzOiBpSWlpMUkxMUkxSUkxICUgb08wbyAqIGkxSUlpCkAgcm91dGUgKCBtb2RlID0gIkNsZWFyVHJha3RBY2NvdW50IiApCmRlZiBJaTExSWkxSSAoICkgOgogaW1wb3J0IHhibWNndWkKIGlmIHhibWNndWkgLiBEaWFsb2cgKCApIC4geWVzbm8gKCBvbzBPb28wICwgInswfSBUcmFrdCB7MX0uIHsyfSIgLiBmb3JtYXQgKCBfICggIkRlbGV0ZSIgKSAsIF8gKCAiU2V0dGluZ3MiICkgLiBsb3dlciAoICkgLCBfICggIkFyZSB5b3Ugc3VyZT8iICkgKSApIDoKICB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBzZXRTZXR0aW5nICggIlRSQUtUX0VYUElSRVNfQVQiICwgIiIgKQogIHhibWNhZGRvbiAuIEFkZG9uICggKSAuIHNldFNldHRpbmcgKCAiVFJBS1RfQUNDRVNTX1RPS0VOIiAsICIiICkKICB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBzZXRTZXR0aW5nICggIlRSQUtUX1JFRlJFU0hfVE9LRU4iICwgIiIgKQogIGlmIDcyIC0gNzI6IGlJSTExMWkgLyBpMUlJaSAqIE9vME9vbyAtIEkxSWkxMTEKICBpZiA1MSAtIDUxOiBJSTExMWlpaWkgKiBPb08wTzAwICUgbzBvT09vME8wT29vICogSUkxMTFpaWlpICUgSTFpaTExaUlpMTFpIC8gb29Pb08wbwpAIHJvdXRlICggbW9kZSA9ICJtZXNzYWdlIiAsIGFyZ3MgPSBbICJ1cmwiIF0gKQpkZWYgaUlJSUlpaTEgKCBtZXNzYWdlICkgOgogaW1wb3J0IHhibWNndWkKIGlmIGxlbiAoIG1lc3NhZ2UgKSA+IDgwIDoKICBrb2RpbmcgLiBUZXh0X0JveCAoIG9vME9vbzAgLCBtZXNzYWdlICkKIGVsc2UgOgogIHhibWNndWkgLiBEaWFsb2cgKCApIC4gb2sgKCBvbzBPb28wICwgbWVzc2FnZSApCiAgaWYgNTggLSA1ODogaTExaUlpaUlpaSAlIEkxMWkKICBpZiA3MSAtIDcxOiBPT29vT09vICsgb29Pb08wbyAlIGkxMWlJaWlJaWkgKyBJMWlpMTFpSWkxMWkgLSBJaUlJCkAgcm91dGUgKCAnY2xlYXJDYWNoZScgKQpkZWYgb08wT09vTzAgKCApIDoKIGltcG9ydCB4Ym1jZ3VpCiBvb29vb29PMG9vID0geGJtY2d1aSAuIERpYWxvZyAoICkKIGlmIG9vb29vb08wb28gLiB5ZXNubyAoIG9vME9vbzAgLCBfICggIkNsZWFyIE1ldGFkYXRhPyIgKSApIDoKICBrb2RpbmcgLiBSZW1vdmVfVGFibGUgKCAibWV0YSIgKQogIGtvZGluZyAuIFJlbW92ZV9UYWJsZSAoICJlcGlzb2RlX21ldGEiICkKIGlmIG9vb29vb08wb28gLiB5ZXNubyAoIG9vME9vbzAgLCBfICggIkNsZWFyIFNjcmFwZXIgQ2FjaGU/IiApICkgOgogIGltcG9ydCB1bml2ZXJzYWxzY3JhcGVycwogIHVuaXZlcnNhbHNjcmFwZXJzIC4gY2xlYXJfY2FjaGUgKCApCiBpZiBvb29vb29PMG9vIC4geWVzbm8gKCBvbzBPb28wICwgXyAoICJDbGVhciBHSUYgQ2FjaGU/IiApICkgOgogIEkxMTFJaTExMSA9IG9zIC4gcGF0aCAuIGpvaW4gKAogeGJtYyAuIHRyYW5zbGF0ZVBhdGggKCB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRTZXR0aW5nICggImNhY2hlX2ZvbGRlciIgKSApICwKICJhcnRjYWNoZSIgKQogIGtvZGluZyAuIERlbGV0ZV9Gb2xkZXJzICggSTExMUlpMTExICkKIHhibWMgLiBsb2cgKCAicnVubmluZyBob29rOiIgLCB4Ym1jIC4gTE9HTk9USUNFICkKIHJ1bl9ob29rICggImNsZWFyX2NhY2hlIiApCiBpZiA0IC0gNDogb08wbwogaWYgOTMgLSA5MzogT29PME8wMCAlIG9PMG8gLiBPb08wTzAwICogSTFJaTExMSAlIElpMUkgLiBJSTExMWlpaWkKZGVmIGlJMWlpMUlpICggbW9kZSAsIHVybCA9ICIiICkgOgogaW1wb3J0IHVybGxpYgogb29vbzAwMCA9IHN5cyAuIGFyZ3YgWyAwIF0gKyAiP21vZGU9JXMiICUgbW9kZQogaWYgMTYgLSAxNjogSTFpaTExaUlpMTFpICsgT29PME8wMCAtIElJMTExaWlpaQogaWYgdXJsIDoKICBvb29vMDAwICs9ICImdXJsPSVzIiAlIHVybGxpYiAuIHF1b3RlX3BsdXMgKCB1cmwgKQogcmV0dXJuIG9vb28wMDAKIGlmIDg1IC0gODU6IE9vT29PTzAwICsgaTFJSWkKIGlmIDU4IC0gNTg6IElJMTExaWlpaSAqIE9Pb29PT28gKiBJMWlpMTFpSWkxMWkgLyBPT29vT09vCmRlZiBvTzBvME9PT08gKCApIDoKIG9vb28wMDAgPSBydW5faG9vayAoICJmaXJzdF9ydW5fd2l6YXJkIiApCiBpZiBvb29vMDAwIDoKICByZXR1cm4KICBpZiA2OCAtIDY4OiBpSUkxMTFpIC0gSTFJaTExMSAtIEkxSWlpSSAtIEkxaWkxMWlJaTExaSArIEkxMWkKICBpZiAxMCAtIDEwOiBPb29vb29vb09PICUgaUlpaTFJMTFJMUlJMQogIGlmIDU0IC0gNTQ6IEkxSWkxMTEgLSBJSTExMWlpaWkgJSBPb09vT08wMCAlIEkxMWkgJSBpSWlpMUkxMUkxSUkxICsgb29Pb08wbwppZiB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRTZXR0aW5nICggImZpcnN0X3J1biIgKSA9PSAidHJ1ZSIgOgogb08wbzBPT09PICggKQogaWYgMTUgLSAxNTogSTExaSAqIG9vT29PMG8gKiBPbzBPb28gJSBpMTFpSWlpSWlpICUgT29Pb09PMDAgLSBPT29vT09vCk8wb29vME8wb28wID0geGJtYyAuIGdldEluZm9MYWJlbCAoICJDb250YWluZXIuRm9sZGVyTmFtZSIgKQppZiBPMG9vbzBPMG9vMCBpbiBbICIiICwgInBsdWdpbi5wcm9ncmFtLnN1cGVyLmZhdm91cml0ZXMiIF0gOgogX19idWlsdGluX18gLiBKRU5fV0lER0VUID0gVHJ1ZQplbHNlIDoKIF9fYnVpbHRpbl9fIC4gSkVOX1dJREdFVCA9IEZhbHNlCiBpZiA5MSAtIDkxOiBpSWlpMUkxMUkxSUkxICsgSTFJaTExMQp4Ym1jcGx1Z2luIC4gYWRkU29ydE1ldGhvZCAoIGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKSAsIHhibWNwbHVnaW4gLiBTT1JUX01FVEhPRF9OT05FICkKeGJtY3BsdWdpbiAuIGFkZFNvcnRNZXRob2QgKCBpbnQgKCBzeXMgLiBhcmd2IFsgMSBdICkgLCB4Ym1jcGx1Z2luIC4gU09SVF9NRVRIT0RfTEFCRUwgKQppZiAzMSAtIDMxOiBJaUlJIC4gT29Pb09PMDAgLiBPT29vT09vCnJvdXRlciAuIFJ1biAoICkKaWYgNzUgLSA3NTogSTExaSArIE9vTzBPMDAgLiBPb09vT08wMCAuIG9vT29PMG8gKyBPbzBPb28gLiBPb08wTzAwCnhibWNwbHVnaW4gLiBlbmRPZkRpcmVjdG9yeSAoIGludCAoIHN5cyAuIGFyZ3YgWyAxIF0gKSAsIGNhY2hlVG9EaXNjID0gRmFsc2UgKQp0cnkgOgogSWlJSUlpSTFJMSA9IF9fYnVpbHRpbl9fIC4gY29udGVudF90eXBlCmV4Y2VwdCA6CiBwYXNzCmlmIG5vdCB4Ym1jYWRkb24gLiBBZGRvbiAoICkgLiBnZXRTZXR0aW5nICggImZpcnN0X3J1biIgKSA9PSAidHJ1ZSIgOgogaWYgSWlJSUlpSTFJMSA9PSAiZmlsZXMiIDoKICBJaUlJSWlJMUkxID0gIm90aGVyIgogcmVzb3VyY2VzIC4gbGliIC4gdXRpbCAuIHZpZXdzIC4gc2V0X2xpc3Rfdmlld19tb2RlICggSWlJSUlpSTFJMSApCiMgZGQ2NzhmYWFlOWFjMTY3YmM4M2FiZjc4ZTVjYjJmM2YwNjg4ZDNhMwo=]')