import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import __builtin__
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
if 73 - 73: II111iiii
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * Ii1I
if 46 - 46: ooOoO0o * I11i - OoooooooOO
if 30 - 30: o0oOOo0O0Ooo - O0 % o0oOOo0O0Ooo - OoooooooOO * O0 * OoooooooOO
if 60 - 60: iIii1I11I1II1 / i1IIi * oO0o - I1ii11iIi11i + o0oOOo0O0Ooo
if 94 - 94: i1IIi % Oo0Ooo
if 68 - 68: Ii1I / O0
if 46 - 46: O0 * II111iiii / IiII * Oo0Ooo * iII111i . I11i
if 62 - 62: i11iIiiIii - II111iiii % I1Ii111 - iIii1I11I1II1 . I1ii11iIi11i . II111iiii
if 61 - 61: oO0o / OoOoOO00 / iII111i * OoO0O00 . II111iiii
if 1 - 1: II111iiii - I1ii11iIi11i % i11iIiiIii + IiII . I1Ii111
if 55 - 55: iIii1I11I1II1 - I1IiiI . Ii1I * IiII * i1IIi / iIii1I11I1II1
if 79 - 79: oO0o + I1Ii111 . ooOoO0o * IiII % I11i . I1IiiI
if 94 - 94: iII111i * Ii1I / IiII . i1IIi * iII111i
if 47 - 47: i1IIi % i11iIiiIii
if 20 - 20: ooOoO0o * II111iiii
if 65 - 65: o0oOOo0O0Ooo * iIii1I11I1II1 * ooOoO0o
IiI1i = "http://supremacy.org.uk/Supremacy%20Sports/main.xml"
__builtin__ . tvdb_api_key = "BA1389F1DD8E787A"
__builtin__ . tmdb_api_key = "4b01582d1d5902b79fcdbfdb5f4e1fde"
__builtin__ . trakt_client_id = "948c4e2514db4f2cca33e737f5e73ae213e537d344b9916983e53e3cc2a1b21c"
__builtin__ . trakt_client_secret = "140369c2c981732a7b183db2e9300065629b8b7417a149a0c4e098ebee8f692e"
__builtin__ . search_db_location = ""
if 61 - 61: I1ii11iIi11i + I11i / I1Ii111 . o0oOOo0O0Ooo
import os
import sys
if 72 - 72: Oo0Ooo % OOooOOo . I1IiiI / I11i * I1IiiI
import koding
import koding . router as router
from resources . lib . installa import Dialog_specific
from resources . lib . news_window import Dialog_Example
import resources . lib . search
import resources . lib . sources
import resources . lib . testings
import resources . lib . util . info
import xbmc
import xbmcaddon
import xbmcplugin
from koding import route
from resources . lib . util . xml import JenList , display_list
import resources . lib . util . views
from resources . lib . plugins import *
from language import get_string as _
from resources . lib . plugin import run_hook
if 31 - 31: II111iiii + OoO0O00 . I1Ii111
if 68 - 68: I1IiiI - i11iIiiIii - OoO0O00 / OOooOOo - OoO0O00 + i1IIi
IiiIII111ii = xbmcaddon . Addon ( ) . getAddonInfo ( 'id' )
i1iIIi1 = xbmcaddon . Addon ( ) . getAddonInfo ( 'name' )
ii11iIi1I = xbmc . translatePath ( 'special://home/' )
iI111I11I1I1 = os . path . join ( ii11iIi1I , 'addons' )
OOooO0OOoo = os . path . join ( iI111I11I1I1 , IiiIII111ii )
iIii1 = "files"
oOOoO0 = xbmcaddon . Addon ( id = IiiIII111ii )
O0OoO000O0OO = oOOoO0 . getSetting ( 'dlimage' )
iiI1IiI = oOOoO0 . getSetting ( 'news_win' )
if 13 - 13: Oo0Ooo . i11iIiiIii - iIii1I11I1II1 - OoOoOO00
@ route ( "main" )
def ii1I ( ) :
 if iiI1IiI == 'true' :
  if 76 - 76: O0 / o0oOOo0O0Ooo . I1IiiI * Ii1I - OOooOOo
  koding . Add_Dir ( name = 'Latest News And Updates' , url = '{"my_text":"Latest News[CR]!!!","my_desc":""}' , mode = 'dialog_example' , folder = False , icon = os . path . join ( OOooO0OOoo , 'icon.png' ) , fanart = os . path . join ( OOooO0OOoo , 'fanart.jpg' ) )
 if not Oooo ( IiI1i ) :
  koding . Add_Dir (
 name = _ ( "Message" ) ,
 url = _ ( "Sorry, server is down" ) ,
 mode = "message" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Search" ) ,
 url = "" ,
 mode = "Search" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Testings" ) ,
 url = '{"file_name":"testings.xml"}' ,
 mode = "Testings" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
 if O0OoO000O0OO == 'true' :
  koding . Add_Dir ( name = 'Download Backgrounds' , url = '{"my_text":"INSTALLA[CR]!!!","my_desc":""}' , mode = 'dialog_specific' , folder = False , icon = os . path . join ( OOooO0OOoo , 'icon.png' ) , fanart = os . path . join ( OOooO0OOoo , 'fanart.jpg' ) )
  if 67 - 67: OOooOOo / OoooooooOO % I11i - iIii1I11I1II1
  if 82 - 82: i11iIiiIii . OOooOOo / Oo0Ooo * O0 % oO0o % iIii1I11I1II1
@ route ( mode = 'get_list_uncached' , args = [ "url" ] )
def Oo00OOOOO ( url ) :
 global iIii1
 if 85 - 85: ooOoO0o . iII111i - OoO0O00 % ooOoO0o % II111iiii
 OO0o00o = JenList ( url , cached = False )
 if not OO0o00o :
  koding . dolog ( _ ( "returned empty for " ) + url )
 oOOo0oo = OO0o00o . get_list ( )
 o0oo0o0O00OO = OO0o00o . get_content_type ( )
 if oOOo0oo == [ ] :
  return False
 if o0oo0o0O00OO :
  iIii1 = o0oo0o0O00OO
 display_list ( oOOo0oo , iIii1 )
 return True
 if 80 - 80: i1IIi
 if 70 - 70: OoOoOO00 - o0oOOo0O0Ooo
@ route ( mode = "get_list" , args = [ "url" ] )
def Oooo ( url ) :
 global iIii1
 if 43 - 43: I11i / II111iiii / OoooooooOO . o0oOOo0O0Ooo . Ii1I
 OO0o00o = JenList ( url )
 if not OO0o00o :
  koding . dolog ( _ ( "returned empty for " ) + url )
 oOOo0oo = OO0o00o . get_list ( )
 o0oo0o0O00OO = OO0o00o . get_content_type ( )
 if oOOo0oo == [ ] :
  return False
 if o0oo0o0O00OO :
  iIii1 = o0oo0o0O00OO
 display_list ( oOOo0oo , iIii1 )
 return True
 if 19 - 19: I11i + ooOoO0o
 if 53 - 53: OoooooooOO . i1IIi
@ route ( mode = "all_episodes" , args = [ "url" ] )
def ii1I1i1I ( url ) :
 global iIii1
 import pickle
 import xbmcgui
 OOoo0O0 = pickle . loads ( url )
 iiiIi1i1I = [ ]
 oOO00oOO = xbmcgui . DialogProgress ( )
 oOO00oOO . create ( i1iIIi1 , _ ( "Loading items" ) )
 OoOo = len ( OOoo0O0 )
 for iI , o00O in enumerate ( OOoo0O0 ) :
  if oOO00oOO . iscanceled ( ) :
   break
  OOO0OOO00oo = ( ( iI + 1 ) * 100 ) / OoOo
  oOO00oOO . update ( OOO0OOO00oo , _ ( "processing lists" ) , _ ( "%s of %s" ) % (
 iI + 1 ,
 OoOo ) )
  if 31 - 31: II111iiii - OOooOOo . I1Ii111 % OoOoOO00 - O0
  OO0o00o = JenList ( o00O )
  iiiIi1i1I . extend ( OO0o00o . get_list ( skip_dialog = True ) )
 iIii1 = "episodes"
 display_list ( iiiIi1i1I , "episodes" )
 if 4 - 4: II111iiii / ooOoO0o . iII111i
 if 58 - 58: OOooOOo * i11iIiiIii / OoOoOO00 % I1Ii111 - I1ii11iIi11i / oO0o
@ route ( mode = "Settings" )
def ii11i1 ( ) :
 xbmcaddon . Addon ( ) . openSettings ( )
 if 29 - 29: I1ii11iIi11i % I1IiiI + ooOoO0o / o0oOOo0O0Ooo + OOooOOo * o0oOOo0O0Ooo
 if 42 - 42: Ii1I + oO0o
@ route ( mode = "ScraperSettings" )
def o0O0o0Oo ( ) :
 xbmcaddon . Addon ( 'script.module.universalscrapers' ) . openSettings ( )
 if 16 - 16: O0 - I1Ii111 * iIii1I11I1II1 + iII111i
 if 50 - 50: II111iiii - ooOoO0o * I1ii11iIi11i / I1Ii111 + o0oOOo0O0Ooo
@ route ( mode = "ResolverSettings" )
def O0O0O ( ) :
 xbmcaddon . Addon ( 'script.module.resolveurl' ) . openSettings ( )
 if 83 - 83: I1ii11iIi11i / ooOoO0o
 if 49 - 49: o0oOOo0O0Ooo
@ route ( mode = "ClearTraktAccount" )
def IIii1Ii1 ( ) :
 import xbmcgui
 if xbmcgui . Dialog ( ) . yesno ( i1iIIi1 , "{0} Trakt {1}. {2}" . format ( _ ( "Delete" ) , _ ( "Settings" ) . lower ( ) , _ ( "Are you sure?" ) ) ) :
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_EXPIRES_AT" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_ACCESS_TOKEN" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_REFRESH_TOKEN" , "" )
  if 5 - 5: iII111i % OOooOOo + ooOoO0o % i11iIiiIii + o0oOOo0O0Ooo
  if 60 - 60: OoO0O00 * OoOoOO00 - OoO0O00 % OoooooooOO - ooOoO0o + I1IiiI
@ route ( mode = "message" , args = [ "url" ] )
def O00Oo000ooO0 ( message ) :
 import xbmcgui
 if len ( message ) > 80 :
  koding . Text_Box ( i1iIIi1 , message )
 else :
  xbmcgui . Dialog ( ) . ok ( i1iIIi1 , message )
  if 100 - 100: O0 + IiII - OOooOOo + i11iIiiIii * Ii1I
  if 30 - 30: o0oOOo0O0Ooo . Ii1I - OoooooooOO
@ route ( 'clearCache' )
def Ii1iIiii1 ( ) :
 import xbmcgui
 oOO00oOO = xbmcgui . Dialog ( )
 if oOO00oOO . yesno ( i1iIIi1 , _ ( "Clear Metadata?" ) ) :
  koding . Remove_Table ( "meta" )
  koding . Remove_Table ( "episode_meta" )
 if oOO00oOO . yesno ( i1iIIi1 , _ ( "Clear Scraper Cache?" ) ) :
  import universalscrapers
  universalscrapers . clear_cache ( )
 if oOO00oOO . yesno ( i1iIIi1 , _ ( "Clear GIF Cache?" ) ) :
  OOO = os . path . join (
 xbmc . translatePath ( xbmcaddon . Addon ( ) . getSetting ( "cache_folder" ) ) ,
 "artcache" )
  koding . Delete_Folders ( OOO )
 xbmc . log ( "running hook:" , xbmc . LOGNOTICE )
 run_hook ( "clear_cache" )
 if 59 - 59: II111iiii + OoooooooOO * OoOoOO00 + i1IIi
 if 58 - 58: II111iiii * OOooOOo * I1ii11iIi11i / OOooOOo
def oO0o0OOOO ( mode , url = "" ) :
 import urllib
 O0O0OoOO0 = sys . argv [ 0 ] + "?mode=%s" % mode
 if 10 - 10: OoooooooOO % iIii1I11I1II1
 if url :
  O0O0OoOO0 += "&url=%s" % urllib . quote_plus ( url )
 return O0O0OoOO0
 if 54 - 54: I1Ii111 - II111iiii % OoOoOO00 % I11i % iIii1I11I1II1 + ooOoO0o
 if 15 - 15: I11i * ooOoO0o * Oo0Ooo % i11iIiiIii % OoOoOO00 - OOooOOo
def O0ooo0O0oo0 ( ) :
 O0O0OoOO0 = run_hook ( "first_run_wizard" )
 if O0O0OoOO0 :
  return
  if 91 - 91: iIii1I11I1II1 + I1Ii111
  if 31 - 31: IiII . OoOoOO00 . OOooOOo
  if 75 - 75: I11i + OoO0O00 . OoOoOO00 . ooOoO0o + Oo0Ooo . OoO0O00
if xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 O0ooo0O0oo0 ( )
 if 96 - 96: OOooOOo . ooOoO0o - Oo0Ooo + iIii1I11I1II1 / OoOoOO00 * OOooOOo
O0ii1ii1ii = xbmc . getInfoLabel ( "Container.FolderName" )
if O0ii1ii1ii in [ "" , "plugin.program.super.favourites" ] :
 __builtin__ . JEN_WIDGET = True
else :
 __builtin__ . JEN_WIDGET = False
 if 91 - 91: IiII
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_NONE )
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
if 15 - 15: II111iiii
router . Run ( )
if 18 - 18: i11iIiiIii . i1IIi % OoooooooOO / O0
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = False )
try :
 iIii1 = __builtin__ . content_type
except :
 pass
if not xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 if iIii1 == "files" :
  iIii1 = "other"
 resources . lib . util . views . set_list_view_mode ( iIii1 )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')